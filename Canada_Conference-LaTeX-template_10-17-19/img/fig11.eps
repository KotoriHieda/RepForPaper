%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 552.000000 264.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 552 264
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 552 264
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: YuGothic-Regular
%!FontType1-1.0: YuGothic-Regular 1.0000.1.8500
14 dict begin/FontName /YuGothic-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /gid16 put
dup 34 /gid25 put
dup 35 /gid26 put
dup 36 /gid22 put
dup 37 /gid19 put
dup 38 /gid1 put
dup 39 /gid17 put
dup 40 /gid28 put
dup 41 /gid20 put
dup 42 /gid27 put
dup 43 /gid5 put
dup 44 /gid3 put
dup 45 /gid4 put
dup 46 /gid7 put
dup 47 /gid8 put
dup 48 /gid14 put
dup 49 /gid18 put
dup 50 /gid21 put
dup 51 /gid24 put
dup 52 /gid29 put
dup 53 /gid15 put
dup 54 /gid23 put
dup 55 /gid30 put
dup 56 /gid9 put
dup 57 /gid31 put
dup 58 /gid6 put
dup 59 /gid2 put
dup 60 /gid10 put
dup 61 /gid11 put
dup 62 /gid12 put
dup 63 /gid13 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -840 1 index div -619 2 index div 2378 3 index div 2642 5 -1 roll div]cvx def
/sfnts [<


23622D2C234AB1024E2B2D2C234AB1014E2B2D2C238A4A234564B0022564B002256164B00343525821206459B1024E2B23B000505865592D2C238A4A234564B0022564B002256164B00343525821206459B1014E2B23B000505865592D2C20B003254AB1024E2B8A103B2D2C20B003254AB1014E2B8A103B2D2CB00325B003258AB0672B8A103B2D2CB00325B003258AB0682B8A103B2D2CB0032546B003254660B004252EB00425B00425B0042620B000505821B06A1BB06C592BB0032546B00325466061B08062208A2010233A232010233A2D2CB0032547B003254760B0052547B0806361B00225B00625496323B005254AB080632058621B2159B0042646608A468A4660B02063612D2CB00426B00425B00425B00426B06E2B208A2010233A232010233A2D2C2320B001545821B00225B1024E2BB0805020605920606020B001515821211B20B005515821206661B0402361B100032550B00325B00325505A5820B00325618A535821B000591B21591BB00754582066616523211B2121B000595959B1024E2B2D2CB00225B004254AB0005358B0001B8A8A238AB00159B004254620666120B00526B0062649B00526B00526B0702B236165B02060206661B02061652D2CB0022546208A20B000505821B1024E2B1B452321596165B00225103B2D2CB0042620B802006220B80200638A236120B05D602BB00525118A128A20398A58BA005D10000004266356602B23212010204620B1024E2B23611B2321208A201049B1024E2B593B2D2CBA005D10000009256356602BB00525B00525B00526B06D2BB15D0725602BB00525B00525B00525B00525B06F2BBA005D10000008266356602B20B0005258B0502BB00525B00525B00725B00725B00525B0712BB0021738B00052B00225B001525A58B00425B0062549B00325B00525496020B0405258211BB000525820B0025458B00425B00425B00725B0072549B00217381BB00425B00425B00425B0062549B0021738595959595921212121212D2CBA005D1000000B256356602BB00725B00725B00625B00625B00C25B00C25B00925B00825B06E2BB0041738B00725B00725B00726B06D2BB00425B00425B00426B06D2BB0502BB00625B00625B00325B0712BB00525B00525B00325B002173820B00625B00625B00525B0712B60B00625B00625B0042565B0021738B00225B002256020B040535821B0406123B04061231BB8FFC05058B0406023B04060235959B00825B00825B00426B0021738B00525B005258AB002173820B0005258B00625B0082549B00325B00525496020B0405258211BB0005258B00625B00625B00625B00625B00B25B00B2549B0041738B00625B00625B00625B00625B00A25B00A25B00725B0712BB0041738B00425B00425B00525B00725B00525B0712BB00217381BB004

661BB068592BB00525B00425B0042620B000505821B0661BB068592B54587DB0042510B00325C5B0022510B00125C5B0052621B00526211BB00626B00425B00325B00826B06F2B59B100024354587DB00225B0822BB00525B0822B20206961B00443012361B06060206961B0206120B00826B008268AB00217388A8A6120696161B00217381B2121212159182D2C4B52B1010243535A58231020013C003C1B2121592D2C23B00225B00225535820B00425583C1B3959B00160B8FFE91C592121212D2CB0022547B0022547548A20201011B001608A2012B00161B0852B2D2CB0042547B002254754232012B001612320B0062620201011B00160B00626B0852B8A8AB0852B2D2CB00243B001525821212121211B462346608A8A462320468A608A61B8FF8062232010238AB10C0C8A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A592D2C2045B0032546524BB013515B58B0022546206861B00325B003253F2321381B2111592D2CB080B0024350B001B00243545B58212310B0201AC91B8A10ED592D2C4B525845441B2121592D0000000500CDFF33073306E1000300060009000C000F000CB304000701002F332F3230311321112101210101110101210903CD0666F99A05B8FAF8028502C7FD7DFD390504FD7FFD350285FD7B06E1F8520744FCE7FC910632FCE7FC950317FD39031B031D000001000000000000000000000006B102512B303130000001002DFF5A03B006AE00030008B10203002F2F30310101230103B0FCE366031D06AEF8AC07540000020083001203F00602000700170015400C0008606C00050410606C040D003F2B3F2B3031012011102120111005220706111017163332373611102726023C01B4FE47FE4C01B9A64743544790A6484255470602FD10FD0002FC02F471A59AFEC0FE8F9B83AD9E0142016D967E00000100D1002D03A805FE000C001D40100909040C07616C0C05010405606C040C003F2B323F2B12392F30310111211521352111060727363702940114FD46012782AB17AAB005FEFA9C6D6D04D9594177397500010087002D03D50602001E001B400F1E1E11041C606C0405110E606C110C003F2B3F2B12392F3031133637363332171615140706070407211521351201363736353427262322039329806C9EBC6E634743ABFEDF7502CDFCB27F013CA8352D53476EFC34047FCA64557165A3836E669AFDFD7165013001219D5C4E5F83483DFECD00010077001203E406020033002E401A333304181815042625616C262615042F606C0405151C606C150D003F2B3F2B12392F2B1112392F11392F3031133637363332171615140706071516171615140706232003371617163332373635342726232335333237363534272623220706079439776688B8726555497BA053498875B1FEBD7C
7B355649708F5147675DA57367AF594C56486F6C4D472004E7924940706292915D4F1D0D246E6188CC77670117357E332C605483A4534B75594C7F80463A3E3966000001008B002D03DD05E9000C000FB7060C0C0B616C0C04003F2B3F30310115020302032312131213213503DDD2695F2092297F67B8FD3305E967FEB0FEA9FECDFE8501A3015C011D012B750000030077001203FA0602001F00300041002040132031606C20200818285F6C18050839606C080D003F2B3F2B12392F2B303101161716151407062322272635343736372627263534373633321716151407060736373635342726232207061514171617170607061514171633323736353427262702AEC34B3E8E78BCD77B6F594DA6A641387E6FA6C274644943FB9F3A2F584C77864C423E3B8B04B2453C61548BA2564949439F0339566A5780C76D5C766AAB8C60534D4F5F5075A7665970618F86554C134451406377453C4E446A67423E3C8150554A67904E45584B7E744B444400020054002D04DD06020007000F001F40110F04406C0F0F070206080B070C406C0702003F2B323F3312392F2B30310101230321032301010326272306070302F001ED8F9EFDCDA28701EE014F7C433413363E7B0602FA2B01EDFE1305D5FC850185CBC1C8C2FE79000300E7002D04DF06020013001E0027002440150A09151F406C1515001320406C13080014406C0002003F2B3F2B12392F2B3939303113212017161514070607151617161514070623211311213237363534272623011121201134272623E701DD01127763685892C465589A85DFFE06850123D16B5A5C57C0FEBA016201848075C606026A59A88F5B4E150B186D5F8ED36E5F0564FDEA554877903B37FD79FD94013399544C0001008F0010050E061D001B002140120101180D0D101803406C1803100B406C1009003F2B3F2B12392F11392F30310107022122070611101716332013170221202726111037363332171605028556FECEDF8177997FBF0142548380FE65FEE3AB9CC9A6F5D48E7A047F290152C1B0FEE0FEB7B495015831FE64E6D1014D0180D7B27D6B000200E7002D05660602000A00130015400C000B406C00020A0C406C0A08003F2B3F2B30311321201716111007062121131121203736111021E701BA0168B7A6E7BEFEC6FE60870115012A9A90FDBE0602CFBCFEA8FE78C6A40562FB11AEA3012C027200000100E7002D048D0602000B002040130306406C03030A0B02406C0B020A07406C0A08003F2B3F2B12392F2B3031011521112115211121152111047EFCF00250FDB0031FFC5A060275FDF675FD947505D500000100E7002D06720602001B001E401102120805130D406C1B13020917406C0908003F2B3F332B323F33303101112311132306030123012627230615131123113301161733123701




00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/gid1 1 def
/gid2 2 def
/gid3 3 def
/gid4 4 def
/gid5 5 def
/gid6 6 def
/gid7 7 def
/gid8 8 def
/gid9 9 def
/gid10 10 def
/gid11 11 def
/gid12 12 def
/gid13 13 def
/gid14 14 def
/gid15 15 def
/gid16 16 def
/gid17 17 def
/gid18 18 def
/gid19 19 def
/gid20 20 def
/gid21 21 def
/gid22 22 def
/gid23 23 def
/gid24 24 def
/gid25 25 def
/gid26 26 def
/gid27 27 def
/gid28 28 def
/gid29 29 def
/gid30 30 def
/gid31 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-840 -619 2378 2642}def
/UniqueID 4095570 def
currentdict currentfile eexec

448B680BDED47378D6B99CAB0B4D7761EFF8262A94EEFBA4991CA310C3A6574C3DDFAB443EDA6ABBB7C185997298B4FEAFD01FB7484D9E2B99ED96B9BD55169AA2862B7E7C90050701026FF86643FCD79D05DEE1F9891C66874EF5BA9787584139D160147AA302A712C4B84B7D888342EF51B28B7451A3496267557314935A9E08D31A19BAA018F3E7C0C986C7F3A1AF71E6AC5D03764E2E9DE7B015F8E71A267A93312106C432E9EC5E765C9FA8BCDC27B740F854736884DDA8A6837B90F16C76DCC1C9A87E5FF2B4FD995D0BA9302918E2E19C084BCDEB83C6AD34CF72B598B067E783F9163A430F3CF768FCBEF261210515765D97D31F1ACFBE4CED8ED13B18C1DBD823858AE3E7B065D22C53AE74296FA5978AE78E5BFE8998E19B42098A94E366D76FF268FF1BC2ACB4759825CC20A6AE11FA9A7FE9060273E411FF8CF8C55694304ABA3859DD05DDE04373F75C147054555D7DDE671F24C73C45B85A48B8C727C4A91BA3849988C77AD40607B8B540FC9C5FEB6A76B8D483732BB0F6DE6E919AE798F8F0383986C47BBEB7BEC444C68CC08AF92AF2A56ACB7F68D7A8E614691A465940284F2E39426B921CA80AA1B3223CCFD1FCDBE10A6EE5D53B074A12D9EAE6499957325A1198C345A819F4ACE8AABECC8CBFABBC99DD7A5796936861A597A28430DAFC889A77B18B6A86A1ADAE4C70D3B2D9450457E870642EB4B5597AA6AD7591E23F43DFA359801AAF1AFE1B00A669AB8C6204F1F2FF871CC76C44F578A425934209F189BA76B593FDD5BB0829518876CB2CFA0024A5DA9082C690854C15F2E4B9FB36F9B0F0DC6619E51F4073CD51D7F474E88197FC38637A05012AB5E50955DDA5F2C3136FB7D820F6DAB092E657E2D812269373F8397A9D5D3C0661260EDC8A41ABF5327DFFFD4F7DBA4F56715DB1102FA39FC3EFFE0C12E1E88750BE7BDB9661D974D49329377DAC7A76C3D0DC6B217281269782DB89F82177C154B3C2DF09F7E71F001C6C85D076D1BB38D9CA319DDCD058B7C60B9800FC5D896E7B5A596C5E4EF12A551BB32E144E16FDBCCC57F4198262D57029476A03EC5873207A06068149524D182291C90C9E010E4C93A838EECEEE5B3AD560269C09E7393AB35B644F71F40CB4ED7A1EFBF011B0B029D2B3C47283FEBD981E311FAEE9778615B5EB7172F44C583B62350C45C994919ABB3C8000CBF213F32F127D2604C71958E80620EC00FC710DACBE52DF940A7B64530ED554DF280CC67ACB0CFADA1E1805E6BE25712CDBD59A0C6DED2BE2CAF3B590C7EB708CC380EFC7F1167F979F6209E3302E513520B0A13026606F6C9E306CBC6D72D83708E971D8B4376120F5AAC6E420E3AA696CAE1521F0876F829D927A57EC9EA211F2CE92E63A34BFF5F7B57E2F068976F38F8FB0397E5726636F1FC6885B90A00D1BF58E9BDE1C
D0FCF88DB1BEEA5CDC401D2B239F662A81D7F52FA81296CC4E85FC0C62D2767FF4AB0CE19B517EE9591D9801DF87897C764937050036A85C76953BAA6DDC48B54DBE0844629A6DD03C562F21A2DE58079C35F51DF4A10824FFB58EFD7022F992F7D5FB2A9F5F223E84AF7D19ECAC995F85FB7D5721162FF0F7D5BDB695E9154A2956AD1CB0DE05D5B85081FB8A5F6E36DC5E563CDEB8B7168A92F8E831B5BEA63424318D1C3F000454B69B8AE35816C3CD61CF093DE46CAF401D611E824D2411E01D9609C94A5B294DB58F68A50ADF8BC0163373C73AD20E6CE95BA93F88CA4DDCDFAA42E271E49E5BE71F25F7451263E84C20D2AFD288FEE58E1FF02589D4A1D16EB32809FC45FF2F9E54D8219F4C9F4A1E17ABF7A78D1CD311B0BF99FB639761F44DA6A13BB3E4A20B5C59D20954D42868EBD3158E6760FC6729B149AED5553071F082ABFB95629BFBAD36251BDA9EEAA6C098D4130B8E6199640AF852360A873ADD30E14AD4942AAFC68AA58645A6FB048CCFF32D1EFF2D348AE993775BE29764F16E49DBF83D83332B7D45D75A65FBF210BD7389D58B24DAD649557CCAEE9EB68767423BA08075EB401F83F1B79FAA32CE8A2F1C1981716F08DB4D546D0E171CF31B47A3AFDE3636E6DB658B5FCC6A3B74526248E33A1FAC75AF4D153CA8414F5A6F7ADB0F8A785B2F2B5F5411E7499D854757290D6BF1D52355334F8FD6352F0BE6F6C184FB2698920D2C93F0428403AFF8D517C8EA14CC3A55A3308C915910E892C1990DB1FCFAAC1CCC0A24923429D278151B1D3776967EFD0346BD338644B1B64FF16155B3D5ECF07A8D0860E4ACA7F9922765FB655D83D50E365B4BCC9FC0691994580E752B77E9C7C4B9E2C0C9B1557A27D7983EFE438FD808F8BCD6DFC25AC2361BAFA753FBF53A9F41024FC260D4987BB1AA06D59800E5B93D9E015F4E32671EB2732F36532462E678EB2FFA46CAFC490D7EFDC0784B66C88BA1FBFAAFC15035383269A0F36790A941516ECC5EC99EBDEA1ACAFC08E098AF287F039FA3676286A791A71A31C4022A083D9D451F988A801CE29873358520EE31C4EF188810B50C93E10CBB6E245CC70536B8506F3D9AB02D954FDAEB5C4E258409711EAF1950346F03F304A9E53E104A86C56BC3F57DC132291643BA66E0F5A97ECACF554A8BEF80762AEC8DDBD1B7EFCDF58C687D51FEEA7ADFD590C8F111614536FBF88B19B306283CC3E58513714A3508BA4542BD1D0120D7A8716258D75FF35C4F215A4897078708BBAFAF37A1500EEBBAB1CA998953F30223EAD82597D14A42E2276F6E877A7A00125EFEA4BA25E1EE3151138BCC2030BEE2118BF61FC9030711775F3129E4CA2C71BA7C7CB7924C8371934EC9BF08C7FF947DD4DDA2D07A09F77FE7245A4CA316BB5B3DA3690C2083B41D6E38691096628B36C584FC389C
79A93682819E2D38F0A14F656C99FD841E6F990A64361ECCE88D7FA325E5E77CB8CBA9C03B3AD4CD5C6C70A65518E722325A6F4162AC51F5B929CADDDFCD523683513594E832FE346818067B7DACE8AA32D83F905033E9A983840723B5F38EE4B895E7B8B5BDA8CE36CFC9EE7C063ABDAA8B4523DBDCBE5C205FF451CE5754178C145A914E7B3A548330966C4D63AC92D2D3B6F4DB77BF22F82A773E2A9BD0160E9EEF07EAD63A0B550D9D25C9F913B2CE1C943FAA66D9B8AC91882C7FB4CA90FDED62B494EBA99502410C45564FA420D8DE81EBC2B7D7C758F8C6D328A262AE0E1CEE4896C3F2656D89C505948037E76623179CABCD7452FC4DBC37D3071C853CCE6EE654FE2160BD36C79D8054297DD02A937D420F0A75DF26D7CF0B969A0938AE3B8E63AC399E41A2D1F9964CF3FD814343636C8533C6912EEDC47BB1223D08E99EC0B0BF0A471ED24A6CCFA6A3C6B7AEEF4458CA6FF2B497950628940A5CA4D0AA9F1642207C1178C17011F59DEA9DCDB5B0914489066FD2EEC597CA7D94E838F0D6B3268589293D9D7CBB6736BEB21B55062D868D43C83AF736A53C1DF1E77B907BB61F985F15EB42335C9B25211506F0F9111DAF62347F76E3C1AD9BA11B9E9B59551F8E611431C12DDE52406724C4231A160773C647AC1E5F834986482223DBDE0B3930FF0FEA109F257E9731101B5CCFCD0BE70F1A82C010137C5B7AA610BBAE11141577B219596D149DB7CA6912D6BDA5B7CA55D50C19749D5D7D5681FF7DF7A70BB807EB1A878A3363CC08D5F8565B99A030F72D6C05F02A4C2412722741A9C38F7728270AD4BDAC8912AB6DAFDFB506E6865C880F571B64A3EAA4A09D92925431678242D125B6C037088C23233A2E795143F54537C9746D10717C4F35A3E88C618BBD648A6C4022836DBDB29585D7D7DC52BCDF84750D657AD1C2E86DE8256030941D0370874255DC7A5632C9A6A92DE3E92AA88C7BEE38F337B14644D3FCED91DA3B13B719C244F625389790F05C9FC8EB501A01B04966BC16EC7FED44D52633A970AFF7B574F4526D3F05C37095F66424744CDCD937B7862EA3ECA25D4E654BA6B5E962BBEC2D479F25B92D18E2C18C4EE65426E13B25199160C1A6563B92B08ECCBBAD63F88CBC5595F3335553C305F42EEFE757736F674F5451D6D15379A492D9B75349B7F10C3EC093342466626DFD26A24352ADB0B0CEA89BAF14B6BBF2EAFCA2C27934897FF0B42021C5FC47E4561F8017B248963F1B10AE7FB3836EAAA3BB9FEBFFC4F9BFF069478913273B4CFF1403CFE801F34B958DEBE81E7222E6C635022A7AFE338531A75A953614573C553EB6A7E4ED58E58D893E4E7993481934D402D625A319CA3F35E7D46776FEEECF03FCCBCE0346C3E1C8BBABB33B2A42E562B99C9E2F7B8921F9CAD7BFA3CFDBAEAD40574702811CCA94

BAA1D791
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/YuGothic-Regular cguidfix
/F1.1/YuGothic-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 552 264 rc
-235.5 441.5 m
882.5 441.5 l
882.5 -341.5 l
-235.5 -341.5 l
h
-235.5 441.5 m
f
Q
/Cs2 SC
1 1 1 sc
q
9.4375 254.24609 m
542.4375 254.24609 l
542.4375 9.2460938 l
9.4375 9.2460938 l
h
9.4375 254.24609 m
W
9 9 533 245 rc
9 9 m
542 9 l
542 254 l
9 254 l
h
f
6350 w
1 j
0 0 0 sc
0.00007874 0 0 -0.00007874 9 253.5125 cm
965200 179704.97 m
965200 2992755 l
S
1930400 179704.97 m
1930400 2992755 l
S
2895600 179704.97 m
2895600 2992755 l
S
3860800 179704.97 m
3860800 2992755 l
S
4826000 179704.97 m
4826000 2992755 l
S
5791200 179704.97 m
5791200 2992755 l
S
CM
9 239.36249 m
541 239.36249 l
541 238.69589 l
9 238.69589 l
h
9 238.02919 m
541 238.02919 l
541 237.36249 l
9 237.36249 l
h
f
0.00007874 0 0 -0.00007874 9 253.5125 cm
0 446404.97 m
6756400 446404.97 l
S
0 1716405 m
6756400 1716405 l
S
12700 w
0 2986405 m
6756400 2986405 l
S
1 0 0 1 31.75248 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(!"#$%&)[ 8.000401 7.004400 7.004400 2.996399 5.996403 0.000000 ] xS
1 0 0 1 109.75249 -21 cm
0 245 m
('\(\)*)[ 9.000001 5.999999 6.996000 0.000000 ] xS
1 0 0 1 184.75 -21 cm
0 245 m
(+,-.)[ 6.999600 6.999600 6.999601 0.000000 ] xS
1 0 0 1 260.75 -21 cm
0 245 m
(+,-/)[ 6.999600 6.999600 6.999601 0.000000 ] xS
Q
0 0 0 sc
q
9.4375 254.24609 m
542.4375 254.24609 l
542.4375 9.2460938 l
9.4375 9.2460938 l
h
9.4375 254.24609 m
W
313 177 76 77 rc
1 0 0 1 315.7525 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(0123\)4+,-.)[ 11.000401 7.004400 7.004402 7.004400 7.004402 4.004402 7.004402 7.004402 7.004402 0.000000 ] xS
Q
q
9.4375 254.24609 m
542.4375 254.24609 l
542.4375 9.2460938 l
9.4375 9.2460938 l
h
9.4375 254.24609 m
W
389 177 76 77 rc
1 0 0 1 391.7525 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(0123\)4+,-/)[ 11.000401 7.004400 7.004402 7.004400 7.004402 4.004402 7.004402 7.004402 7.004402 0.000000 ] xS
Q
q
9.4375 254.24609 m
542.4375 254.24609 l
542.4375 9.2460938 l
9.4375 9.2460938 l
h
9.4375 254.24609 m
W
9 9 533 245 rc
1 0 0 1 472.7525 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(54$%67+,-/)[ 8.000401 4.004398 2.996401 5.996401 5.996399 5.996403 7.004402 7.004402 7.004398 0.000000 ] xS
1 0 0 1 42.75248 -82 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(-)s
1 0 0 1 118.75 -41 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(8)s
1 0 0 1 190.75 -42 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 266.75 -42 cm
0 245 m
(9)s
1 0 0 1 337.75 -82 cm
0 245 m
(:;:)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 413.75 -82 cm
0 245 m
(-;+)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 489.75 -82 cm
0 245 m
(+;:)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 118.75249 -61 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(<)s
1 0 0 1 190.75 -62 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 266.75 -62 cm
0 245 m
(9)s
1 0 0 1 118.75249 -81 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(=)s
1 0 0 1 190.75 -82 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 118.75 -101 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(>)s
1 0 0 1 119.75249 -121 cm
0 245 m
(?)s
1 0 0 1 266.75 -122 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 42.75248 -182 cm
0 245 m
(+)s
1 0 0 1 118.75 -141 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(8)s
1 0 0 1 337.75 -182 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(+;:)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 413.75 -182 cm
0 245 m
(+;+)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 489.75 -182 cm
0 245 m
(-;+)[ 9.000000 8.008001 0.000000 ] xS
1 0 0 1 118.75249 -161 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(<)s
1 0 0 1 190.75 -162 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 118.75249 -181 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(=)s
1 0 0 1 190.75 -182 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 266.75 -182 cm
0 245 m
(9)s
1 0 0 1 118.75 -201 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(>)s
1 0 0 1 266.75 -202 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
1 0 0 1 119.75249 -221 cm
/F1.1[ 12 0 0 12 0 0]sf
0 245 m
(?)s
1 0 0 1 266.75 -222 cm
/F1.1[ 16 0 0 16 0 0]sf
0 245 m
(9)s
ep
end
